[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

render_mode unshaded, skip_vertex_transform;

uniform int fuzz_amount = 0;
uniform int ball_size = 1;
uniform int outline = -1;
uniform int color_index = 0;
uniform int outline_color_index = 0;
uniform float z_add = .0;
uniform bool has_texture = false;
uniform sampler2D ball_texture: hint_white;
uniform vec2 texture_size;
uniform vec2 texture_size_raw;
uniform int transparent_index = 0;
uniform bool transparency_on = true;
uniform sampler2D palette: hint_white;
uniform vec3 z_center_pet_world = vec3(0.0);

varying flat vec2 center_fragcoord;
varying flat vec4 center_view;
varying flat float z_center_ball;
varying flat float z_center_pet;

float random (float x) {
    return fract(sin(dot(vec2(x),
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

vec3 get_shifted_color(int palette_index) {
	int modded_color = color_index - int(mod(float(color_index), 10.0));
	int amount_to_shift_index = int(mod(float(palette_index), 10.0));
	
	// shift according to z
	if(z_center_ball < z_center_pet) {
		amount_to_shift_index = int(min(float(amount_to_shift_index + 2), 9.0));
	}
	else if (z_center_ball > z_center_pet) {
		amount_to_shift_index = int(max(float(amount_to_shift_index - 1), 0.0));
	}
	int new_palette_index = modded_color + amount_to_shift_index;
	vec3 new_color = texture(palette, vec2(float(new_palette_index)/255.0, 0.0)).rgb;
	return new_color;
}

void fragment() {
    vec2 c = center_fragcoord;
    vec2 st = FRAGCOORD.xy;

    // FUZZING
    float r = random(st.y - c.y);
    r = (r * 2.0) - 1.0;
    r *= float(fuzz_amount);
    st.x += floor(r);

    // OUTLINING
    float pct2 = 0.0;
    vec2 st2 = st;
    int modified_outline = outline;
    if(outline == -1) {
        modified_outline = 0;
    }
    else if(outline == 0) {
        st2.x -= 1.0;
        vec2 vec = st2 - c;
        pct2 = step(length(vec), float(ball_size) / 2.0);
        modified_outline = 0;
    } else if (outline == -2) {
        st2.x += 1.0;
        vec2 vec = st2 - c;
        pct2 = step(length(vec), float(ball_size) / 2.0);
        modified_outline = 0;
    } else if (outline == -1) {
        pct2 = 0.0;
        modified_outline = 0;
    } else if (outline > 1) {
        vec2 vec = st2 - c;
        pct2 = step(length(vec), float(ball_size) / 2.0);
        modified_outline -= 1;
    } else if (outline == 1) {
        float side = sign(st2.x - c.x);
        vec2 vec = st2 - c;
        pct2 = step(length(vec), float(ball_size) / 2.0);
        modified_outline = 0;
        st.x += 1.0 * side;
    } else if (outline == -3) {
        vec2 vec = st2 - c;
        pct2 = step(length(vec), float(ball_size) / 2.0);
        modified_outline = 4;
    } else if (outline < -1) {
        float side = sign(st2.x - c.x);
        float side2 = sign(st2.y - c.y);
        st2.x -= 1.0 * side;
        st2.y -= 1.0 * side2;
        vec2 vec = st2 - c;
        pct2 = step(length(vec), float(ball_size) / 2.0);
        modified_outline = 0;
    }

    // DRAWING
    vec2 vector_from_center = st - c;
    float pct = step(length(vector_from_center), (float(ball_size) / 2.0 - float(modified_outline)));

    if (outline != -1)
        pct2 -= pct;

    vec3 texture_color;

    // Directly calculate normalized coordinates relative to ball size
    vec2 tex_coords = (st - c) / float(ball_size) + vec2(0.5, 0.5);

    // Adjust texture coordinates to ensure the center of the texture aligns correctly
    if (texture_size_raw.x < texture_size.x || texture_size_raw.y < texture_size.y) {
        // Calculate exact half-size offset
        float center_x_offset = (texture_size.x / 2.0 - texture_size_raw.x / 2.0) / texture_size.x;
        float center_y_offset = (texture_size.y / 2.0 - texture_size_raw.y / 2.0) / texture_size.y;

        // Apply the center offset precisely
        tex_coords.x -= center_x_offset;
        tex_coords.y += center_y_offset;

        // Tile from the center point
        tex_coords = mod(tex_coords, vec2(1.0, 1.0));
    }

    // Flip y-coordinate for correct orientation
    tex_coords.y = 1.0 - tex_coords.y;

    // Sample from the texture
    int palette_index = int(texture(ball_texture, tex_coords).r * 255.0);

    // Determine transparency
    bool is_transparent = (palette_index == 253);


    if (outline == -3) 
        ALBEDO = vec3(pct * vec3(1.0) + pct2 * vec3(0.0));
    else {
        if (transparent_index > 0 && color_index < 150 && has_texture) {
            if(transparent_index == 1 || (palette_index >= transparent_index && palette_index < transparent_index + 10)) {
                texture_color = get_shifted_color(palette_index);
            } else {
                texture_color = texture(palette, vec2(float(palette_index) / 255.0, 0.0)).rgb;
            }
        }
        else if (transparent_index == 0 && color_index < 150 && has_texture) {
            texture_color = texture(palette, vec2(float(palette_index) / 255.0, 0.0)).rgb;
        }
        else {
            texture_color = texture(palette, vec2(float(color_index) / 255.0, 0.0)).rgb;
        }
        vec3 outline_color = texture(palette, vec2(float(outline_color_index) / 255.0, 0.0)).rgb;
        ALBEDO = vec3(pct * texture_color.rgb + pct2 * outline_color.rgb);
    }

    float alpha_value = 1.0 - step(pct + pct2, 0.0);
    if (is_transparent && transparency_on) {
        alpha_value = 0.0;
    }
    ALPHA = alpha_value;
    ALPHA_SCISSOR = 1.0;
}

void vertex() {
	// Billboard
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
	
	z_center_ball = (MODELVIEW_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).z;
	z_center_pet = (INV_CAMERA_MATRIX * vec4(z_center_pet_world, 1.0)).z;
	
	// Find the original position of the vertex
	vec3 vert_in_clip_space = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;
	
	vec4 center_clip_space = MODELVIEW_MATRIX * vec4(vec3(0.0), 1.0);
	// Calculate center fragcoord. Do in vertex shader to avoid calculating per frag.
	center_view = PROJECTION_MATRIX * center_clip_space;
	vec2 center_ndc = (center_view.xy + 1.0) / 2.0;

	center_fragcoord = floor(center_ndc * VIEWPORT_SIZE) + 0.5;
	
	vert_in_clip_space.z = center_clip_space.z;
	vert_in_clip_space.z += z_add * 0.001;
	float b = (float(ball_size) / 2.0 + 0.5 + float(fuzz_amount + 3)) / (VIEWPORT_SIZE.x / 2.0);
	vert_in_clip_space.x = center_clip_space.x + b * sign(vert_in_clip_space.x);
	vert_in_clip_space.y = center_clip_space.y + b * sign(vert_in_clip_space.y);
	
	VERTEX = vert_in_clip_space;
}"

[resource]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/fuzz_amount = 0
shader_param/ball_size = 10
shader_param/outline = -1
shader_param/color_index = 0
shader_param/outline_color_index = 0
shader_param/z_add = 0.0
shader_param/has_texture = false
shader_param/texture_size = null
shader_param/texture_size_raw = null
shader_param/transparent_index = 0
shader_param/transparency_on = true
shader_param/z_center_pet_world = Vector3( 0, 0, 0 )
