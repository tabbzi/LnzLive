[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

render_mode unshaded, skip_vertex_transform;

uniform int line_width_in_pixels_start = 20;
uniform int fuzz_amount = 0;
uniform int line_width_in_pixels_end = 20;
uniform int color_index = 0;
uniform int l_color_index = 0;
uniform int r_color_index = 0;
varying flat vec2 center_of_line;
varying flat vec2 center_of_line_screen_uv;
varying float line_width_in_pixels;
varying flat vec2 uv_to_flat;
uniform vec3 ball_world_pos1 = vec3(0.0);
uniform vec3 ball_world_pos2 = vec3(0.0);
uniform sampler2D line_texture: hint_white;
uniform vec2 texture_size;
uniform int transparent_index = 0;
uniform bool transparency_on = true;
uniform sampler2D palette: hint_white;
varying vec2 uv_mod;
varying vec2 max_x;
uniform bool has_texture = false;
varying flat float z_center_line;
varying flat float z_center_pet;
uniform vec3 z_center = vec3(0.0);

float random (float x) {
    return fract(sin(dot(vec2(x),
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

vec3 get_shifted_color(int palette_index) {
	int modded_color = color_index - int(mod(float(color_index), 10.0));
	int amount_to_shift_index = int(mod(float(palette_index), 10.0));
	if(z_center_line < z_center_pet) {
		amount_to_shift_index = int(min(float(amount_to_shift_index + 2), 9.0));
	}
	else if (z_center_line > z_center_pet) {
		amount_to_shift_index = int(max(float(amount_to_shift_index - 1), 0.0));
	}
	int new_palette_index = modded_color + amount_to_shift_index;
	vec3 new_color = texture(palette, vec2(float(new_palette_index)/256.0, 0.0)).rgb;
	return new_color;
}

void fragment() {
    vec2 st = FRAGCOORD.xy;

    vec2 absolute_center = center_of_line;

    // FUZZING
    float r = random(st.y - absolute_center.y);
    r = (r * 2.0) - 1.0;
    r *= float(fuzz_amount) / 100.0;

    vec3 texture_color;

    // Rescale the UV between 0 and 1
    float scaled_uv_x = uv_mod.x / max_x.x;
    vec2 move_vec = uv_to_flat * r;
    vec2 modified_uv = vec2(scaled_uv_x, UV.y) - move_vec;
    float one_pixel = 0.5 / (floor(line_width_in_pixels) + 0.5);

    // Initialize is_transparent to false
    bool is_transparent = false;

    if(modified_uv.x < 0.25 + one_pixel && r_color_index != -1) {
        texture_color = texture(palette, vec2(float(r_color_index) / 255.0, 0.0)).rgb;
    }
    else if (modified_uv.x > 0.75 - one_pixel && l_color_index != -1) {
        texture_color = texture(palette, vec2(float(l_color_index) / 255.0, 0.0)).rgb;
    }
    else {
        // Calculate palette_index from the texture
        int palette_index = int(texture(line_texture, (SCREEN_UV - center_of_line_screen_uv) * (1000.0 / texture_size)).r * 255.0);
        
        // Set is_transparent based on palette_index
        is_transparent = (palette_index == 253);

        if (transparent_index > 0 && color_index < 150 && has_texture) {
            // Apply palette shifting if necessary
            if(transparent_index == 1 || (palette_index >= transparent_index && palette_index < transparent_index + 10)) {
                texture_color = get_shifted_color(palette_index);
            } else {
                // Get the base texture color
                texture_color = texture(palette, vec2(float(palette_index) / 255.0, 0.0)).rgb;
            }
        }
        else if (transparent_index == 0 && color_index < 150 && has_texture) {
            texture_color = texture(palette, vec2(float(palette_index) / 255.0, 0.0)).rgb;
        }
        else {
            texture_color = texture(palette, vec2(float(color_index) / 255.0, 0.0)).rgb;
        }
    }

    ALBEDO = texture_color;

    float alpha_value = 1.0;
    if (modified_uv.x < 0.25 || modified_uv.x > 0.75 || (is_transparent && transparency_on)) {
        alpha_value = 0.0;
    }

    ALPHA = alpha_value;
    ALPHA_SCISSOR = 1.0;
}


void vertex() {
	mat4 projection = PROJECTION_MATRIX * MODELVIEW_MATRIX;
	
	// Find the original position of the vertex
	vec4 vert_in_clip_space = projection * vec4(VERTEX, 1.0);
	vec2 vert_in_ndc_space = vert_in_clip_space.xy / vert_in_clip_space.w;
	
	// Find the opposite pair of the vertex.
	// The mesh has a slight x-width to allow us to find the orientation later
	// So when we come to give the line a fixed pixel width,
	// We need to remove that x-width from the total later.
	vec4 paired_point = vec4(VERTEX + vec3(-VERTEX.x, 0, 0), 1.0);
	vec4 paired_point_clip_space = projection * paired_point;
	vec2 paired_point_ndc_space = paired_point_clip_space.xy / paired_point_clip_space.w;
	
	// Find the opposite end of the line
	vec4 next_point = vec4(VERTEX + vec3(0, -1.0, 0), 1.0);
	vec4 next_point_clip_space = projection * next_point;
	vec2 next_point_ndc_space = next_point_clip_space.xy / next_point_clip_space.w;
	
	// Find the normal, i.e. direction we want to shove the vertices
	vec2 line_direction_onscreen = normalize(next_point_ndc_space - vert_in_ndc_space);
	vec2 normal = vec2(-line_direction_onscreen.y, line_direction_onscreen.x);
	uv_to_flat = normalize(normal - vec2(1.0, 0.0));
	
	// Depending on which side of the mesh this vertex is on,
	// We want to shove the vertex either left or right
	float orientation = 1.0;
	if (VERTEX.x < 0.0 ) {
		orientation = -1.0;
	}
	
	// Depending on line end, set line width
	line_width_in_pixels = float(line_width_in_pixels_start);
	if(VERTEX.y < 0.0) {
		line_width_in_pixels = float(line_width_in_pixels_end);
	}
	
	// Note - this requires that camera is set to 'keep width'
	vec2 n = floor(normal * line_width_in_pixels * 2.0) * orientation;
	vec3 offset = vec3(n / VIEWPORT_SIZE, 0.0);
	
	// Remove the mesh's default x-width from the final output
	vec2 existing_width = vert_in_ndc_space - paired_point_ndc_space;
	offset.xy -= existing_width;
	
	float z_pos = vert_in_clip_space.z;
	// Find the minimum z for this line
	if (!(ball_world_pos1 == vec3(0.0) && ball_world_pos2 == vec3(0.0))) {
		vec4 ball_screen_pos1 = PROJECTION_MATRIX * INV_CAMERA_MATRIX * vec4(ball_world_pos1, 1.0);
		vec4 ball_screen_pos2 = PROJECTION_MATRIX * INV_CAMERA_MATRIX * vec4(ball_world_pos2, 1.0);
		z_pos = max(ball_screen_pos1.z, ball_screen_pos2.z);
	}
	VERTEX = vec3(vert_in_ndc_space, z_pos + 0.001 / 1000.0) + offset;
	
	// Calculate center fragcoord. Do in vertex shader to avoid calculating per frag.
	vec4 center_view = projection * vec4(vec3(0.0), 1.0);
	vec2 center_ndc = (center_view.xy + 1.0) / 2.0;
	// Must be an exact pixel coordinate or you get strange pixel effects
	center_of_line = floor(center_ndc * VIEWPORT_SIZE) + 0.5;
	center_of_line_screen_uv = center_ndc;
	
	float max_x_f = line_width_in_pixels / max(float(line_width_in_pixels_end), float(line_width_in_pixels_start));
	uv_mod = UV;
	if(UV.x > 0.0)
		uv_mod.x = max_x_f;
	max_x = vec2(max_x_f, 0.0);
	
	z_center_line = (MODELVIEW_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).z;
	z_center_pet = (INV_CAMERA_MATRIX * vec4(z_center, 1.0)).z;
	
	PROJECTION_MATRIX = mat4(1.0);
}"

[resource]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/line_width_in_pixels_start = 10.0
shader_param/fuzz_amount = 0
shader_param/line_width_in_pixels_end = 10.0
shader_param/color_index = 0
shader_param/l_color_index = 0
shader_param/r_color_index = 0
shader_param/ball_world_pos1 = Vector3( 0, 0, 0 )
shader_param/ball_world_pos2 = Vector3( 0, 0, 0 )
shader_param/texture_size = null
shader_param/transparent_index = 0
shader_param/transparency_on = true
shader_param/has_texture = false
shader_param/z_center = Vector3( 0, 0, 0 )
